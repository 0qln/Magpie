package Engine;

public class FenDecoder
{
    public static IFenDecoder<Board> decode(String[] tokens) {
        return () -> {
            // Set up pieces
            int squareIdx = 63;
            for (int i = 0; i < tokens[0].length(); i++) {
                // skip slashes
                if (tokens[0].charAt(i) == '/') {
                    continue;
                }

                // handle digit
                if (Character.isDigit(tokens[0].charAt(i))) {
                    squareIdx -= tokens[0].charAt(i) - '0';
                    continue;
                }

                // get piece char as Piece Type
                int piece = Piece.fromChar(tokens[0].charAt(i));

                // evaluate
                board.addPiece(squareIdx ^ 7, piece);

                squareIdx--;
            }

            // turn
            if (tokens[1].contains("w")) {
                board.setTurn(Color.White);
            }
            else {
                board.setTurn(Color.Black);
            }

            // castling
            var stateBuilder = new BoardState.Builder(board);
            stateBuilder.castling(Castling.create(
                tokens[2].contains("K"), 
                tokens[2].contains("Q"),
                tokens[2].contains("k"),
                tokens[2].contains("q")
            ));

            // en passant
            if (!tokens[3].contains("-")) {
                stateBuilder.epSquare(Misc.Utils.toSquareIndex(tokens[3]));
            }

            // plys for 50 move rule
            if (tokens.length > 4) {
                stateBuilder.plys50(Integer.parseInt(tokens[4]));
            }

            if (tokens.length > 5) {
                // TODO? 
                // store move count that the fen gives
            }

            board.
        };
    }
}
